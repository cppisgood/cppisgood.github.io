<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>codeforces rating</title>
    <url>/2020/07/28/codeforces_rating/</url>
    <content><![CDATA[<p>更新时间: 2021-03-31 00:30:01 </p>
<table>
<thead>
<tr>
<th align="center">name</th>
<th align="center">id</th>
<th align="center">last contest</th>
<th align="center">old rating</th>
<th align="center">new rating</th>
</tr>
</thead>
<tbody><tr>
<td align="center">lbh</td>
<td align="center"><a href="https://codeforces.com/profile/baddog" target="_blank" rel="noopener">baddog</a></td>
<td align="center"><a href="https://codeforces.com/contest/1493/standings/friends/true" target="_blank" rel="noopener">1493</a></td>
<td align="center">1517</td>
<td align="center">1623</td>
</tr>
<tr>
<td align="center">dhy</td>
<td align="center"><a href="https://codeforces.com/profile/090" target="_blank" rel="noopener">090</a></td>
<td align="center"><a href="https://codeforces.com/contest/1499/standings/friends/true" target="_blank" rel="noopener">1499</a></td>
<td align="center">1241</td>
<td align="center">1402</td>
</tr>
<tr>
<td align="center">hrd</td>
<td align="center"><a href="https://codeforces.com/profile/HRdate" target="_blank" rel="noopener">HRdate</a></td>
<td align="center"><a href="https://codeforces.com/contest/1484/standings/friends/true" target="_blank" rel="noopener">1484</a></td>
<td align="center">1389</td>
<td align="center">1438</td>
</tr>
<tr>
<td align="center">tga</td>
<td align="center"><a href="https://codeforces.com/profile/takesummer" target="_blank" rel="noopener">takesummer</a></td>
<td align="center"><a href="https://codeforces.com/contest/1490/standings/friends/true" target="_blank" rel="noopener">1490</a></td>
<td align="center">1580</td>
<td align="center">1627</td>
</tr>
<tr>
<td align="center">lgw</td>
<td align="center"><a href="https://codeforces.com/profile/hollowape" target="_blank" rel="noopener">hollowape</a></td>
<td align="center"><a href="https://codeforces.com/contest/1501/standings/friends/true" target="_blank" rel="noopener">1501</a></td>
<td align="center">1617</td>
<td align="center">1618</td>
</tr>
<tr>
<td align="center">lhw</td>
<td align="center"><a href="https://codeforces.com/profile/polar_lhv" target="_blank" rel="noopener">polar_lhv</a></td>
<td align="center"><a href="https://codeforces.com/contest/1443/standings/friends/true" target="_blank" rel="noopener">1443</a></td>
<td align="center">1285</td>
<td align="center">1342</td>
</tr>
<tr>
<td align="center">wwj</td>
<td align="center"><a href="https://codeforces.com/profile/WinnieVenice" target="_blank" rel="noopener">WinnieVenice</a></td>
<td align="center"><a href="https://codeforces.com/contest/1343/standings/friends/true" target="_blank" rel="noopener">1343</a></td>
<td align="center">1350</td>
<td align="center">1417</td>
</tr>
<tr>
<td align="center">lcx</td>
<td align="center"><a href="https://codeforces.com/profile/waltz26" target="_blank" rel="noopener">waltz26</a></td>
<td align="center"><a href="https://codeforces.com/contest/1501/standings/friends/true" target="_blank" rel="noopener">1501</a></td>
<td align="center">1149</td>
<td align="center">1257</td>
</tr>
<tr>
<td align="center">lrk</td>
<td align="center"><a href="https://codeforces.com/profile/ForTunAter" target="_blank" rel="noopener">ForTunAter</a></td>
<td align="center"><a href="https://codeforces.com/contest/1420/standings/friends/true" target="_blank" rel="noopener">1420</a></td>
<td align="center">1299</td>
<td align="center">1249</td>
</tr>
<tr>
<td align="center">ljt</td>
<td align="center"><a href="https://codeforces.com/profile/RhInEs" target="_blank" rel="noopener">RhInEs</a></td>
<td align="center"><a href="https://codeforces.com/contest/1427/standings/friends/true" target="_blank" rel="noopener">1427</a></td>
<td align="center">1416</td>
<td align="center">1425</td>
</tr>
<tr>
<td align="center">zj</td>
<td align="center"><a href="https://codeforces.com/profile/gzu_eternity" target="_blank" rel="noopener">gzu_eternity</a></td>
<td align="center"><a href="https://codeforces.com/contest/1499/standings/friends/true" target="_blank" rel="noopener">1499</a></td>
<td align="center">1457</td>
<td align="center">1483</td>
</tr>
<tr>
<td align="center">szw</td>
<td align="center"><a href="https://codeforces.com/profile/veteran233" target="_blank" rel="noopener">veteran233</a></td>
<td align="center"><a href="https://codeforces.com/contest/1484/standings/friends/true" target="_blank" rel="noopener">1484</a></td>
<td align="center">1479</td>
<td align="center">1462</td>
</tr>
<tr>
<td align="center">zhr</td>
<td align="center"><a href="https://codeforces.com/profile/_gan" target="_blank" rel="noopener">_gan</a></td>
<td align="center"><a href="https://codeforces.com/contest/1420/standings/friends/true" target="_blank" rel="noopener">1420</a></td>
<td align="center">0</td>
<td align="center">422</td>
</tr>
<tr>
<td align="center">yyq</td>
<td align="center"><a href="https://codeforces.com/profile/i_am_yyq" target="_blank" rel="noopener">i_am_yyq</a></td>
<td align="center"><a href="https://codeforces.com/contest/1506/standings/friends/true" target="_blank" rel="noopener">1506</a></td>
<td align="center">1155</td>
<td align="center">1208</td>
</tr>
<tr>
<td align="center">zax</td>
<td align="center"><a href="https://codeforces.com/profile/casillas123" target="_blank" rel="noopener">casillas123</a></td>
<td align="center"><a href="https://codeforces.com/contest/1400/standings/friends/true" target="_blank" rel="noopener">1400</a></td>
<td align="center">1021</td>
<td align="center">1044</td>
</tr>
<tr>
<td align="center">lxl</td>
<td align="center"><a href="https://codeforces.com/profile/9lie" target="_blank" rel="noopener">9lie</a></td>
<td align="center"><a href="https://codeforces.com/contest/1463/standings/friends/true" target="_blank" rel="noopener">1463</a></td>
<td align="center">2029</td>
<td align="center">2013</td>
</tr>
<tr>
<td align="center">zwz</td>
<td align="center"><a href="https://codeforces.com/profile/ELT_AW" target="_blank" rel="noopener">ELT_AW</a></td>
<td align="center"><a href="https://codeforces.com/contest/1499/standings/friends/true" target="_blank" rel="noopener">1499</a></td>
<td align="center">1962</td>
<td align="center">1993</td>
</tr>
<tr>
<td align="center">qh</td>
<td align="center"><a href="https://codeforces.com/profile/OVO998244353" target="_blank" rel="noopener">OVO998244353</a></td>
<td align="center"><a href="https://codeforces.com/contest/1440/standings/friends/true" target="_blank" rel="noopener">1440</a></td>
<td align="center">1814</td>
<td align="center">1798</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>《汇编语言》习题</title>
    <url>/2020/02/19/asm/</url>
    <content><![CDATA[<p>王爽《汇编语言》习题</p>
<h1 id="程序设计1"><a href="#程序设计1" class="headerlink" title="程序设计1"></a>程序设计1</h1><a id="more"></a>

<p><img src="https://i.loli.net/2020/02/19/tfmORINwTz2GgkU.png" alt="程序设计1"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">        db &apos;1975&apos;,&apos;1976&apos;,&apos;1977&apos;,&apos;1978&apos;,&apos;1979&apos;,&apos;1980&apos;,&apos;1981&apos;,&apos;1982&apos;,&apos;1983&apos;</span><br><span class="line">        db &apos;1984&apos;,&apos;1985&apos;,&apos;1986&apos;,&apos;1987&apos;,&apos;1988&apos;,&apos;1989&apos;,&apos;1900&apos;,&apos;1991&apos;,&apos;1992&apos;</span><br><span class="line">        db &apos;1993&apos;,&apos;1994&apos;,&apos;1995&apos;</span><br><span class="line"></span><br><span class="line">        dd 16,22,382,1356,4390,8000,16000,24486,50065,97479,140417,197514</span><br><span class="line">        dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000</span><br><span class="line"></span><br><span class="line">        dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">        dw 11542,14430,15257,17800</span><br><span class="line"></span><br><span class="line">        dw 32 dup (0)</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">        dw 32 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">        mov ax,data</span><br><span class="line">        mov ds,ax</span><br><span class="line">        mov ax,stack</span><br><span class="line">        mov ss,ax</span><br><span class="line">        mov sp,64</span><br><span class="line"></span><br><span class="line">        call maketable</span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line"></span><br><span class="line">show_str:</span><br><span class="line">        push es</span><br><span class="line">        push ax</span><br><span class="line">        push cx</span><br><span class="line">        push dx</span><br><span class="line">        push si</span><br><span class="line">        push di</span><br><span class="line"></span><br><span class="line">        mov ax,0b800h</span><br><span class="line">        mov es,ax</span><br><span class="line"></span><br><span class="line">        mov al,160</span><br><span class="line">        mul dh</span><br><span class="line">        mov dh,0</span><br><span class="line">        add dx,dx</span><br><span class="line">        add ax,dx</span><br><span class="line">        mov di,ax</span><br><span class="line"></span><br><span class="line">        mov dl,cl</span><br><span class="line">        mov ch,0</span><br><span class="line">        l0:</span><br><span class="line">                mov cl,[si]</span><br><span class="line">                jcxz back</span><br><span class="line">                mov al,[si]</span><br><span class="line">                mov es:[di],al</span><br><span class="line">                mov es:[di].1,dl</span><br><span class="line">                add si,1</span><br><span class="line">                add di,2</span><br><span class="line">                jmp l0</span><br><span class="line">        back:</span><br><span class="line">        pop di</span><br><span class="line">        pop si</span><br><span class="line">        pop dx</span><br><span class="line">        pop cx</span><br><span class="line">        pop ax</span><br><span class="line">        pop es</span><br><span class="line">        ret</span><br><span class="line"></span><br><span class="line">divdw:</span><br><span class="line">        push bx</span><br><span class="line"></span><br><span class="line">        push ax</span><br><span class="line">        mov ax,dx</span><br><span class="line">        mov dx,0</span><br><span class="line">        div cx</span><br><span class="line">        mov bx,ax</span><br><span class="line">        pop ax</span><br><span class="line">        div cx</span><br><span class="line">        mov cx,dx</span><br><span class="line">        mov dx,bx</span><br><span class="line"></span><br><span class="line">        pop bx</span><br><span class="line">        ret</span><br><span class="line"></span><br><span class="line">dtoc:</span><br><span class="line">        push ax</span><br><span class="line">        push cx</span><br><span class="line">        push dx</span><br><span class="line">        push si</span><br><span class="line">        push di</span><br><span class="line">        push bp</span><br><span class="line"></span><br><span class="line">        mov di,10</span><br><span class="line">        mov bp,0</span><br><span class="line">        l1:</span><br><span class="line">                mov dx,0</span><br><span class="line">                div di</span><br><span class="line">                push dx</span><br><span class="line">                inc bp</span><br><span class="line">                mov cx,ax</span><br><span class="line">                jcxz break1</span><br><span class="line">        jmp l1</span><br><span class="line">        break1:</span><br><span class="line">        mov cx,bp</span><br><span class="line">        l2:</span><br><span class="line">                pop ax</span><br><span class="line">                add ax,30h</span><br><span class="line">                mov [si],ax</span><br><span class="line">                inc si</span><br><span class="line">        loop l2</span><br><span class="line">        mov byte ptr [si],0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pop bp</span><br><span class="line">        pop di</span><br><span class="line">        pop si</span><br><span class="line">        pop dx</span><br><span class="line">        pop cx</span><br><span class="line">        pop ax</span><br><span class="line"></span><br><span class="line">        ret</span><br><span class="line"></span><br><span class="line">dtoc2:</span><br><span class="line">        push ax</span><br><span class="line">        push cx</span><br><span class="line">        push dx</span><br><span class="line">        push si</span><br><span class="line">        push bp</span><br><span class="line"></span><br><span class="line">        mov bp,0</span><br><span class="line">        l3:</span><br><span class="line">                mov cx,10</span><br><span class="line">                call divdw</span><br><span class="line">                push cx</span><br><span class="line">                inc bp</span><br><span class="line"></span><br><span class="line">                mov cx,dx</span><br><span class="line">                jcxz l5</span><br><span class="line">                l5:</span><br><span class="line">                        mov cx,ax</span><br><span class="line">                        jcxz break3</span><br><span class="line">                                </span><br><span class="line">        jmp l3</span><br><span class="line">        break3:</span><br><span class="line">        mov cx,bp</span><br><span class="line">        l4:</span><br><span class="line">                pop ax</span><br><span class="line">                add ax,30h</span><br><span class="line">                mov [si],ax</span><br><span class="line">                inc si</span><br><span class="line">        loop l4</span><br><span class="line">        mov byte ptr [si],0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pop bp</span><br><span class="line">        pop si</span><br><span class="line">        pop dx</span><br><span class="line">        pop cx</span><br><span class="line">        pop ax</span><br><span class="line"></span><br><span class="line">        ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">maketable:</span><br><span class="line">        push ax</span><br><span class="line">        push cx</span><br><span class="line">        push si</span><br><span class="line">        push di</span><br><span class="line">        push bp</span><br><span class="line"></span><br><span class="line">	mov cx,21</span><br><span class="line">	mov bp,210</span><br><span class="line">	mov si,0</span><br><span class="line">	mov di,0</span><br><span class="line">        mov dh,1</span><br><span class="line">	l6:</span><br><span class="line">		mov ax,[0][si][0]</span><br><span class="line">		mov ds:[bp][0],ax</span><br><span class="line">		mov ax,[0][si][2]</span><br><span class="line">		mov ds:[bp][2],ax</span><br><span class="line">                mov byte ptr ds:[bp][4],0</span><br><span class="line">                push cx</span><br><span class="line">                push si</span><br><span class="line">                mov dl,0</span><br><span class="line">                mov cl,2</span><br><span class="line">                mov si,bp</span><br><span class="line">                call show_str</span><br><span class="line">                pop si</span><br><span class="line"></span><br><span class="line">		mov ax,[84][si][0]</span><br><span class="line">                push dx</span><br><span class="line">                push si</span><br><span class="line">		mov dx,[84][si][2]</span><br><span class="line">                mov si,bp</span><br><span class="line">                call dtoc2</span><br><span class="line">                pop si</span><br><span class="line">                pop dx</span><br><span class="line"></span><br><span class="line">                push si</span><br><span class="line">                mov dl,20</span><br><span class="line">                mov cl,2</span><br><span class="line">                mov si,bp</span><br><span class="line">                call show_str</span><br><span class="line">                pop si</span><br><span class="line"></span><br><span class="line">		mov ax,[168][di]</span><br><span class="line">                push si</span><br><span class="line">                mov si,bp</span><br><span class="line">                call dtoc</span><br><span class="line">                pop si</span><br><span class="line"></span><br><span class="line">                push si</span><br><span class="line">                mov dl,40</span><br><span class="line">                mov cl,2</span><br><span class="line">                mov si,bp</span><br><span class="line">                call show_str</span><br><span class="line">                pop si</span><br><span class="line"></span><br><span class="line">                push dx</span><br><span class="line">                mov ax,ds:[84][si][0]</span><br><span class="line">                mov dx,ds:[84][si][2]</span><br><span class="line">                mov cx,ds:[168][di]</span><br><span class="line">                call divdw</span><br><span class="line">                push si</span><br><span class="line">                mov si,bp</span><br><span class="line">                call dtoc</span><br><span class="line">                pop si</span><br><span class="line">                pop dx</span><br><span class="line"></span><br><span class="line">                push si</span><br><span class="line">                mov dl,60</span><br><span class="line">                mov cl,2</span><br><span class="line">                mov si,bp</span><br><span class="line">                call show_str</span><br><span class="line">                pop si</span><br><span class="line">                pop cx</span><br><span class="line"></span><br><span class="line">                inc dh</span><br><span class="line">		add si,4</span><br><span class="line">		add di,2</span><br><span class="line"></span><br><span class="line">        loop l6</span><br><span class="line">        pop bp</span><br><span class="line">        pop di</span><br><span class="line">        pop si</span><br><span class="line">        pop cx</span><br><span class="line">        pop ax</span><br><span class="line">        ret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>大学物理电磁学笔记</title>
    <url>/2019/11/19/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/</url>
    <content><![CDATA[<h1 id="电磁学"><a href="#电磁学" class="headerlink" title="电磁学"></a>电磁学</h1><a id="more"></a>

<p>研究场量的概念。</p>
<p>数学中通过闭合曲面的通量、闭合路径的环量来表述场量的特性。</p>
<h2 id="电荷和库伦定律"><a href="#电荷和库伦定律" class="headerlink" title="电荷和库伦定律"></a>电荷和库伦定律</h2><h3 id="电荷"><a href="#电荷" class="headerlink" title="电荷"></a>电荷</h3><p>塑料棒与毛皮摩擦，塑料棒带负电荷，毛皮带正电荷。</p>
<h3 id="库仑定律"><a href="#库仑定律" class="headerlink" title="库仑定律"></a>库仑定律</h3><p>库仑力</p>
<blockquote>
<p>$$ \vec f =\frac {1}{4\pi \epsilon_0} \frac{q_1q_2}{r^2}\widehat{r} $$</p>
<p>$\epsilon_0$是真空介电常数，有量纲</p>
</blockquote>
<p>库仑力一般远远大于万有引力</p>
<h3 id="电场及叠加原理"><a href="#电场及叠加原理" class="headerlink" title="电场及叠加原理"></a>电场及叠加原理</h3><p>电场力</p>
<blockquote>
<p>$ \vec f = q \vec E $</p>
</blockquote>
<p>电场强度</p>
<blockquote>
<p>$\vec E = \frac {Q} {4 \pi \epsilon_0r^2}\widehat{r}$</p>
</blockquote>
<p>场强叠加原理</p>
<blockquote>
<p>$ \vec E = \sum \limits_{i} \vec E_i $</p>
</blockquote>
<p>电偶极子</p>
<blockquote>
<p>两个等量正负电荷组成的系统</p>
</blockquote>
<p>电偶极矩</p>
<blockquote>
<p>$\vec p = q \vec l$</p>
<p>$\vec l$是两电荷的距离</p>
</blockquote>
<p>电偶极子场强公式</p>
<blockquote>
<p>$\vec E = \frac {1} {4 \pi \epsilon_0r^3}[- \vec p+3(\widehat r*\vec p)]\widehat{r}$</p>
</blockquote>
<h1 id="应考瞎记"><a href="#应考瞎记" class="headerlink" title="应考瞎记"></a>应考瞎记</h1><h2 id="静电场"><a href="#静电场" class="headerlink" title="静电场"></a>静电场</h2><p><strong>高斯定律</strong></p>
<p>穿过一封闭曲面的电通量与封闭曲面所包围的电荷量成正比</p>
<p><strong>无限长带电线电场强度</strong></p>
<p>$\vec E=\frac {\lambda}{2\pi \epsilon_0r}\widehat{e}_r$</p>
<p><strong>沿x方向有限长带电线电场强度</strong></p>
<p>$$\vec E_y=\frac {-\lambda}{4\pi \epsilon_0r}(\cos\theta _f-cos\theta_i)$$</p>
<p>$$\vec E_x=\frac {\lambda}{4\pi \epsilon_0r}(\sin\theta _f-sin\theta_i)$$</p>
<p><strong>封闭曲面的总电通量</strong></p>
<p>$$\Phi=\frac q {\epsilon _0}=\int EdS$$</p>
<p><strong>无限大均匀带电平板电场强度</strong></p>
<p>$$E=\frac \sigma {2\epsilon_0}$$</p>
<p><strong>高斯面的电通量</strong></p>
<p>$$\Phi=\sum \vec E_i*\vec S_i$$</p>
<p>流入高斯面的为负，流出为正</p>
<p>$$ \vec f =\frac {1}{4\pi \epsilon_0} \frac{q_1q_2}{r^2}\widehat{r} $$</p>
<h2 id="静电场中的导体和电介质"><a href="#静电场中的导体和电介质" class="headerlink" title="静电场中的导体和电介质"></a>静电场中的导体和电介质</h2><p><strong>静电平衡时金属内部场强为</strong>0</p>
<p><strong>$C=\frac Q U$</strong></p>
<p><strong>电子在洛伦兹力下做匀速圆周运动</strong></p>
<p>$eBv=\frac {mv^2} r$</p>
<p><strong>通电长指导线</strong></p>
<p>同向相吸</p>
<p>$F=\frac{\mu_0I_1I_2}{2{\pi}d}$</p>
<p><strong>洛伦兹力</strong></p>
<p>$\vec{F}=q\vec{v}\times\vec{B}$</p>
<p><strong>安培环路定律</strong></p>
<p>$\oint{\vec{B}\cdot{d}\vec{l}}=2{\pi}rB=\mu_0I_{in}={\pi}r^2j$  (j指面电流密度)</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>学校课程</category>
      </categories>
      <tags>
        <tag>电磁学</tag>
        <tag>大学物理</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>数字电路笔记</title>
    <url>/2019/11/19/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="数字电路"><a href="#数字电路" class="headerlink" title="数字电路"></a>数字电路</h1><a id="more"></a>

<p>离散的电压序列处理信息</p>
<ol>
<li>分层结构</li>
<li>可复用接口</li>
<li>小代价</li>
<li>可靠</li>
<li>可扩展</li>
</ol>
<h2 id="信息与编码"><a href="#信息与编码" class="headerlink" title="信息与编码"></a>信息与编码</h2><h3 id="数制"><a href="#数制" class="headerlink" title="数制"></a>数制</h3><p>补码</p>
<p>小数补码加1加在最后一位</p>
<h3 id="码制"><a href="#码制" class="headerlink" title="码制"></a>码制</h3><ol>
<li>ascii码 7位</li>
</ol>
<h2 id="逻辑代数基础"><a href="#逻辑代数基础" class="headerlink" title="逻辑代数基础"></a>逻辑代数基础</h2><p>与、或、非、与非、或非、与或非、异或、同或</p>
<h3 id="基本公式"><a href="#基本公式" class="headerlink" title="基本公式"></a>基本公式</h3><ol>
<li>(AB)’=A’+B’</li>
<li>A+BC=(A+B)(A+C)</li>
<li>(A+B)’=A’B’</li>
<li>AB+A’C+BCDEF=AB+A’C</li>
</ol>
<h3 id="基本定理"><a href="#基本定理" class="headerlink" title="基本定理"></a>基本定理</h3><ol>
<li>代入定理</li>
<li>反演定理</li>
</ol>
<h3 id="逻辑函数表达方式"><a href="#逻辑函数表达方式" class="headerlink" title="逻辑函数表达方式"></a>逻辑函数表达方式</h3><ol>
<li><p>真值表</p>
<p>左输入，右输出</p>
</li>
<li><p>逻辑式</p>
<p>逻辑变量取值只有01</p>
<p>尽量变短</p>
</li>
<li><p>逻辑图</p>
</li>
<li><p>波形图</p>
<p>长度=2^n^</p>
</li>
<li><p>卡诺图</p>
</li>
</ol>
<h3 id="逻辑函数标准形式"><a href="#逻辑函数标准形式" class="headerlink" title="逻辑函数标准形式"></a>逻辑函数标准形式</h3><p>最小项m</p>
<blockquote>
<p>乘积形式</p>
<p>所有最小项之和为1</p>
<p>任意最小项只积为0</p>
</blockquote>
<p>最大项M</p>
<blockquote>
<p>和形式</p>
</blockquote>
<p>最小项对应真值表某一行取1的情况</p>
<p>最大项对应真值表某一行取0的情况</p>
<p>任意逻辑函数可以表示为最小项之和或最大项之积</p>
<p>$Y = \sum{m_i} = \prod \limits_{j\neq i}{M_j}$</p>
<h3 id="逻辑函数的化简"><a href="#逻辑函数的化简" class="headerlink" title="逻辑函数的化简"></a>逻辑函数的化简</h3><p>与项少、短 </p>
<ol>
<li><p>公式化简</p>
</li>
<li><p>卡诺图（折叠）（5变量以上一般不用）（化简结果不唯一）</p>
<p>任意项：对逻辑函数的值无关</p>
<p>约束项：不可以取到的项</p>
<p>在公式中加入所有无关项来化简函数</p>
</li>
<li><p>Q-M</p>
</li>
</ol>
<h2 id="门电路"><a href="#门电路" class="headerlink" title="门电路"></a>门电路</h2><p>数字电路用离散的电压信号表示信息</p>
<p>电压信号优点：</p>
<ol>
<li>易观测</li>
<li>功耗可以很低</li>
</ol>
<p>缺点： </p>
<ol>
<li>容易被环境影响</li>
<li>离散的电压序列需要直流电</li>
<li>需要快速脉冲</li>
</ol>
<p><strong>数字器件能够接收低质量信号，输出高质量信号</strong></p>
<p>二极管逻辑电路缺点：电平有偏移、负载能力差</p>
<h3 id="coms反向器动态特性"><a href="#coms反向器动态特性" class="headerlink" title="coms反向器动态特性"></a>coms反向器动态特性</h3><p>传输延迟时间</p>
<p>功耗=静态（很低）+动态（导通功耗+负载功耗）</p>
<p>nmos管下拉（衬底源极接地）</p>
<p>pmos管上拉（衬底源极接高电平）</p>
<h3 id="OD门"><a href="#OD门" class="headerlink" title="OD门"></a>OD门</h3><p>与非门的最后缓冲反向器的Pmos管换成外接电源（带电阻）</p>
<h3 id="传输门"><a href="#传输门" class="headerlink" title="传输门"></a>传输门</h3><p>模拟开关</p>
<h3 id="三态门"><a href="#三态门" class="headerlink" title="三态门"></a>三态门</h3><p>0、1、高阻</p>
<p>总线中经常用</p>
<h3 id="TTL门电路"><a href="#TTL门电路" class="headerlink" title="TTL门电路"></a>TTL门电路</h3><p>用双极性三极管(NPN)</p>
<h2 id="组合逻辑电路"><a href="#组合逻辑电路" class="headerlink" title="组合逻辑电路"></a>组合逻辑电路</h2><p>输入仅取决于输入</p>
<p>不含存储元件</p>
<p>*<em>物理量-&gt;编码-&gt;处理-&gt;译码-&gt;物理量 *</em></p>
<h3 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h3><p>将输入的每个高低电平转化为一位二进制代码</p>
<ol>
<li><p>普通编码器</p>
<p>同时只能处理一个</p>
</li>
<li><p>优先编码器</p>
<p>eg:74HC148、8-3编码器</p>
</li>
</ol>
<h3 id="译码器"><a href="#译码器" class="headerlink" title="译码器"></a>译码器</h3><ol>
<li><p>二进制译码器</p>
<p>eg：3-8译码器、74HC138</p>
</li>
<li><p>十进制译码器</p>
<p>eg：7448</p>
</li>
</ol>
<h3 id="数据选择器"><a href="#数据选择器" class="headerlink" title="数据选择器"></a>数据选择器</h3><p>eg：74HC153 </p>
<p>MUX</p>
<p>具有n位地址输入的数据选择器，至少可以产生n输入变量不大于n+1的组合函数</p>
<p>注意数据端和地址端的分配</p>
<h3 id="加法器"><a href="#加法器" class="headerlink" title="加法器"></a>加法器</h3><ol>
<li><p>半加器</p>
<p>不考虑来自低位的进位，输出不考虑进位的加法结果和是否进位</p>
</li>
<li><p>全加器</p>
<p>考虑来自低位的进位，输出不考虑进位的加法结果和是否进位</p>
</li>
<li><p>超前进位加法器</p>
<p>直接由各个输入算出答案，等待延迟时间短，模块化设计差，复用性差</p>
</li>
</ol>
<h3 id="竞争-冒险现象"><a href="#竞争-冒险现象" class="headerlink" title="竞争-冒险现象"></a>竞争-冒险现象</h3><p>输入在变化的时候在短暂时间内由于输入的传输延迟时间，产生了短暂的错误的输出</p>
<p>输出函数在一定条件下可以整理为Y=A+A‘或Y=AA’时会存在传输延迟时间，所以会存在竞争冒险现象</p>
<p>卡诺图在画圈时相切则一定会出现竞争冒险现象</p>
<p>消除方法：</p>
<ol>
<li>接入滤波电容</li>
<li>引入选通脉冲（在电路稳定的时候再把输入跟输出接通）</li>
<li>修改逻辑设计 </li>
</ol>
<h2 id="时序逻辑电路"><a href="#时序逻辑电路" class="headerlink" title="时序逻辑电路"></a>时序逻辑电路</h2><p>load信号控制存储电路状态</p>
<h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><ol>
<li>用于记忆一位二进制信号<ol>
<li>有两个能自行保持的状态</li>
<li>能根据输入信号置成0或者1</li>
</ol>
</li>
<li>分类<ol>
<li>按触发方式（电平，脉冲，边沿）</li>
<li>按逻辑功能（RS，JK，D，T，T‘）</li>
</ol>
</li>
</ol>
<h4 id="电平触发的触发器"><a href="#电平触发的触发器" class="headerlink" title="电平触发的触发器"></a>电平触发的触发器</h4><p>SR锁存器</p>
<p><img src="https://i.loli.net/2019/11/28/dFlwNRSCgaXijqE.png" alt="SR锁存器"></p>
<p>S、R是同步信号（跟时钟周期有关的输入）</p>
<p>S’<del>D</del> 是异步信号</p>
<p>D触发器</p>
<p><img src="https://i.loli.net/2019/11/28/kLOsmqgNAdIpBET.png" alt="D触发器"></p>
<h4 id="脉冲触发的触发器"><a href="#脉冲触发的触发器" class="headerlink" title="脉冲触发的触发器"></a>脉冲触发的触发器</h4><p>主从SR触发器</p>
<p><img src="https://i.loli.net/2019/11/28/CeythnRzo3QkAxm.png" alt="主从SR触发器"></p>
<p><img src="https://i.loli.net/2019/11/28/lNgzTPm2s1qjh4C.png" alt="图片.png"></p>
<p>clk下降沿时Q变化</p>
<p>JK触发器</p>
<p><img src="https://i.loli.net/2019/11/28/FdKTA8B9ctMjJka.png" alt="JK触发器"></p>
<h4 id="边沿触发器"><a href="#边沿触发器" class="headerlink" title="边沿触发器"></a>边沿触发器</h4><p>D触发器组成的边沿触发器</p>
<p><img src="https://i.loli.net/2019/11/28/tZDQxP8lHA4g5R9.png" alt="D触发器组成的边沿触发器"></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>学校课程</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>数字电路</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论与数理统计笔记</title>
    <url>/2019/11/19/%E6%A6%82%E7%8E%87%E8%AE%BA/</url>
    <content><![CDATA[<center><font size = 8>概率论与数理统计</font></center>
<a id="more"></a>

<p>模型化学习，将事物套入模型解释</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="随机事件"><a href="#随机事件" class="headerlink" title="随机事件"></a>随机事件</h2><blockquote>
<p>随机试验</p>
<ol>
<li>可重复进行</li>
<li>所有结果可知</li>
<li>不可预测结果</li>
</ol>
</blockquote>
<p>随机试验的结果叫随机事件，一般用大写字母表示</p>
<p>必然事件与不可能事件也是随机事件</p>
<blockquote>
<p>样本空间</p>
<ol>
<li>包含所有样本点</li>
<li>可以无限大</li>
</ol>
</blockquote>
<blockquote>
<p>完备事件组：样本空间的一个划分</p>
</blockquote>
<p>运算规律：</p>
<ol>
<li><p>交换律</p>
</li>
<li><p>结合律</p>
</li>
<li><p>交换律</p>
</li>
<li><p>德摩根律</p>
<blockquote>
<p>$\overline{A \cup B} = \overline{A} \cap \overline{B}$</p>
<p>$ \overline{A \cap B} = \overline{A} \cup \overline{B} $</p>
</blockquote>
</li>
</ol>
<h2 id="概率的定义及性质"><a href="#概率的定义及性质" class="headerlink" title="概率的定义及性质"></a>概率的定义及性质</h2><ol>
<li>0 &lt;= p(A) &lt;= 1</li>
<li>p($\Omega$) = 1</li>
<li>p($\cup Ai$) = $\sum p(Ai)$ (Ai 与 Aj互不相容 i != j)</li>
<li>P($A\cup B$) = P(A) + P(B) - P(AB);</li>
</ol>
<h2 id="古典概型"><a href="#古典概型" class="headerlink" title="古典概型"></a>古典概型</h2><ol>
<li>$C_n^m + C_n^{m-1} = C_{n + 1}^m$</li>
<li>样本点等可能性</li>
</ol>
<p>模型：</p>
<ol>
<li>抽签</li>
<li>N个格子放n个球</li>
</ol>
<h2 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h2><p>P(A|B) = P(AB) / P(B)</p>
<p>P(A|B) + P($\overline A | B$) = 1</p>
<h3 id="全概率公式"><a href="#全概率公式" class="headerlink" title="全概率公式"></a>全概率公式</h3><blockquote>
<p>Ｂ是一个完备事件组</p>
<p>Ｐ(A) = $\sum \limits_{i=1} \limits^{n} P(B_i)P(A|B_i)$</p>
</blockquote>
<h3 id="贝叶斯公式"><a href="#贝叶斯公式" class="headerlink" title="贝叶斯公式"></a>贝叶斯公式</h3><blockquote>
<p>$$P(B_j|A) =\frac {P(B_j)P(A|B_j)} {\sum \limits_{i=1} \limits^{n}{P(B_i)P(A|B_i)}}$$</p>
</blockquote>
<h3 id="独立性"><a href="#独立性" class="headerlink" title="独立性"></a>独立性</h3><p>若P(A|B) = P(A), 则A,B独立</p>
<p>若A, B独立, 则AB’, A’B, AB’ 独立</p>
<p><strong>注意区分事件互不相容与事件独立</strong></p>
<p>对于多个事件,注意相互独立与两两独立的不同,相互独立必然要满足两两独立</p>
<h1 id="随机变量"><a href="#随机变量" class="headerlink" title="随机变量"></a>随机变量</h1><h2 id="离散型随机变量"><a href="#离散型随机变量" class="headerlink" title="离散型随机变量"></a>离散型随机变量</h2><h3 id="重复独立试验"><a href="#重复独立试验" class="headerlink" title="重复独立试验"></a>重复独立试验</h3><blockquote>
<p>彼此独立</p>
<p>概率不变</p>
</blockquote>
<h3 id="伯努利试验（只有两个结果）"><a href="#伯努利试验（只有两个结果）" class="headerlink" title="伯努利试验（只有两个结果）"></a>伯努利试验（只有两个结果）</h3><ul>
<li><p>两点分布（0-1分布）</p>
<p>$E(x)=p$</p>
<p>$D(x)=p(1-p)$</p>
</li>
<li><p>二项分布</p>
<p>$p(B_k)=C_n^kp^kq^{n-k}$</p>
<p>$E(x)=np$</p>
<p>$D(x)=np(1-p)$</p>
</li>
<li><p>泊松分布</p>
<p>$p(k)=\frac{\lambda^k} {k!}e^{-\lambda}$</p>
<p>若$np_n$趋于$\lambda$，当n趋于正无穷时</p>
<p>$b(k; n, p_n)$趋于$\frac{\lambda^k} {k!}e^{-\lambda}$(n大，p小，np大小适中)</p>
</li>
</ul>
<h2 id="分布函数"><a href="#分布函数" class="headerlink" title="分布函数"></a>分布函数</h2><ol>
<li>离散型随机变量用分布律</li>
<li>非离散型用分布函数</li>
</ol>
<h3 id="均匀分布"><a href="#均匀分布" class="headerlink" title="均匀分布"></a>均匀分布</h3><p>概率密度是直线</p>
<p>$U(a, b)$</p>
<h3 id="指数分布"><a href="#指数分布" class="headerlink" title="指数分布"></a>指数分布</h3><p>无记忆性的随机分布</p>
<p>$p(x)=\lambda e^{-\lambda x}(x&gt;0)$</p>
<p>$F(x)=1-e^{-\lambda x}(x &gt; 0)$</p>
<h3 id="正态分布"><a href="#正态分布" class="headerlink" title="正态分布"></a>正态分布</h3><p>$$p(x)=\frac {1}{\sigma \sqrt{2\pi}}e^{-\frac {(x-u)^2}{2\sigma^2}}$$</p>
<p>标准分布</p>
<blockquote>
<p>当$\mu$等于0，$\sigma$等于1时，叫做标准正态分布<br>$$\phi(x)=\frac {1}{\sqrt{2\pi}}e^{-\frac {x^2}{2}}$$</p>
</blockquote>
<p>对一般正态分布做线性变换可以使一般正态分布变成标准正态分布(标准化变化)</p>
<blockquote>
<p>令$Y=\frac {x-\mu}{\sigma}$<br>则$p(Y)=\frac {1}{\sqrt{2\pi}}e^{-\frac {Y^2}{2}}$</p>
</blockquote>
<p>上分位点</p>
<blockquote>
<p>$p{x&gt;z_{\alpha}}&gt;a$<br>则z点为上分位点</p>
</blockquote>
<p>柯西分布</p>
<blockquote>
<p>$y=f(x)$</p>
<p>反函数$x=h(y)$</p>
<p>则$p(y)=p(h(y)|h’(y)|)$</p>
</blockquote>
<h1 id="二维随机变量"><a href="#二维随机变量" class="headerlink" title="二维随机变量"></a>二维随机变量</h1><p> $F(x,y)=P{X&lt;=x,Y&lt;=y}$为$(X,Y)$的联合分布函数</p>
<p>概率密度为二维偏导数</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>学校课程</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理笔记</title>
    <url>/2019/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<center><font size = 8>计算机组成原理</font></center>
<a id="more"></a>

<h1 id="计算机基本组成"><a href="#计算机基本组成" class="headerlink" title="计算机基本组成"></a>计算机基本组成</h1><p>计算机</p>
<blockquote>
<p>存储器</p>
<p>I/O</p>
<p>系统总线</p>
<p>CPU</p>
<blockquote>
<p>ALU</p>
<p>内部互连</p>
<p>寄存器</p>
<p>CU(控制单元)</p>
<blockquote>
<p>排队逻辑</p>
<p>寄存器和解码器</p>
<p>控制存储器</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="冯诺依曼计算机特点"><a href="#冯诺依曼计算机特点" class="headerlink" title="冯诺依曼计算机特点"></a>冯诺依曼计算机特点</h2><ol>
<li>五大部件：运算器、控制器、存储器、输入、输出</li>
<li>指令与数据以同等地位存在存储器</li>
<li>指令和数据用二进制表示</li>
<li>指令由操作码和地址码组成</li>
<li>以运算器为中心</li>
</ol>
<h2 id="现代计算机硬件框架"><a href="#现代计算机硬件框架" class="headerlink" title="现代计算机硬件框架"></a>现代计算机硬件框架</h2><img src="https://i.loli.net/2019/11/30/TvrOMF7a5CV64Ec.png" style="zoom:50%;" />

<p>系统复杂化管理方法：</p>
<ol>
<li>层次化（将系统化为多个子模块）</li>
<li>模块化（有明确的接口功能）</li>
<li>规则化（使得模块能被重用）</li>
</ol>
<h2 id="存储器基本结构"><a href="#存储器基本结构" class="headerlink" title="存储器基本结构"></a>存储器基本结构</h2><p>存储器</p>
<blockquote>
<p>存储体</p>
<blockquote>
<p>存储单元(存放一串二级制代码)</p>
<blockquote>
<p>存储字(二进制代码的组合)</p>
<p>存储字长(二进制代码的位数)</p>
<p>每个存储单元有一个地址</p>
</blockquote>
</blockquote>
<p>MAR(存储器地址寄存器)</p>
<blockquote>
<p>反映存储单元的个数</p>
</blockquote>
<p>MDR(存储器数据寄存器)</p>
<blockquote>
<p>长度和存储单元一样</p>
</blockquote>
</blockquote>
<h2 id="运算器基本结构及操作过程"><a href="#运算器基本结构及操作过程" class="headerlink" title="运算器基本结构及操作过程"></a>运算器基本结构及操作过程</h2><p>以简单累加型运算器为例</p>
<img src="https://i.loli.net/2019/11/30/paJF9juOUnSGlHD.png" style="zoom:50%;" />

<p>乘法指令流程</p>
<img src="https://i.loli.net/2019/11/30/7Wod4aeu2zIkLvx.png" style="zoom:50%;" />

<p>除法指令流程</p>
<img src="https://i.loli.net/2019/11/30/Sjb5GzXhqBfWY7L.png" style="zoom:50%;" />

<h2 id="控制器的基本组成"><a href="#控制器的基本组成" class="headerlink" title="控制器的基本组成"></a>控制器的基本组成</h2><p>CU, PC, IR</p>
<p>完成指令流程</p>
<ol>
<li><p>取指令</p>
<p>指令地址存在PC(程序计数器)中,并具有计数功能,找到下一条指令位置</p>
</li>
<li><p>分析指令</p>
<p>IR(指令寄存器)存放当前要执行的指令</p>
</li>
<li><p>执行指令(CU)</p>
</li>
</ol>
<h2 id="计算机硬件指标"><a href="#计算机硬件指标" class="headerlink" title="计算机硬件指标"></a>计算机硬件指标</h2><ol>
<li><p>机器字长</p>
<p>CPU一次处理的位数，与CPU中寄存器位数有关</p>
</li>
<li><p>运算速度</p>
<ol>
<li>主频</li>
<li>核数，线程数</li>
<li>CPI：执行一条指令需要的时钟周期（根据动态/静态频率求加权平均值）</li>
<li>IPC：一个时钟周期可以执行的指令数</li>
<li>MIPS：每秒执行多少百万条指令（收到指令复杂度影响）</li>
<li>FLOPS：每秒浮点运算次数</li>
</ol>
</li>
<li><p>存储容量</p>
<ol>
<li>主存容量</li>
<li>辅存</li>
</ol>
</li>
</ol>
<h1 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h1><blockquote>
<p>连接各个部件的信息传输线</p>
<p>各个部件共享的传输介质</p>
</blockquote>
<p>信息传送：</p>
<ol>
<li>串行</li>
<li>并行（线与线之间容易干扰）</li>
</ol>
<h2 id="总线结构"><a href="#总线结构" class="headerlink" title="总线结构"></a>总线结构</h2><ol>
<li><p>单总线</p>
</li>
<li><p>面向CPU的双总线</p>
</li>
<li><p>以存储器为总线的双总线</p>
</li>
<li><p>三总线</p>
<ol>
<li>主存总线（CPU与主存）、I/O总线（I/O设备和CPU）、DMA总线（高速外设与主存）</li>
<li><img src="https://i.loli.net/2019/11/30/gTUK7l6D9AJ2mwH.png" alt=""></li>
</ol>
</li>
<li><p>四总线</p>
<p><img src="https://i.loli.net/2019/11/30/PCKfNgIdHTAh92O.png" alt=""></p>
</li>
<li></li>
</ol>
<h2 id="总线的分类"><a href="#总线的分类" class="headerlink" title="总线的分类"></a>总线的分类</h2><ol>
<li>片内总线</li>
<li>系统总线（实现计算机各个部件的信息传输）<ol>
<li>数据总线（双向，与机器字长、存储字长有关）</li>
<li>地址总线（单向，与存储地址、IO地址有关）</li>
<li>控制总线（有出有入，总线请求、中断请求）</li>
</ol>
</li>
<li>通信总线（计算机系统间或和其他系统的通信）<ol>
<li>串行</li>
<li>并行</li>
</ol>
</li>
</ol>
<h2 id="总线的特性"><a href="#总线的特性" class="headerlink" title="总线的特性"></a>总线的特性</h2><p>总线印刷在主板上，设备通过接口连接总线</p>
<ol>
<li>机械特性（尺寸、形状、管脚数、排列顺序）</li>
<li>电气特性（传输方向、电平范围）</li>
<li>功能特性</li>
<li>时间特性（信号的时序）</li>
</ol>
<h2 id="总线的性能指标"><a href="#总线的性能指标" class="headerlink" title="总线的性能指标"></a>总线的性能指标</h2><ol>
<li>宽度（数据线条数）</li>
<li>标准传输率（eg：MBps）</li>
<li>时钟同步/异步</li>
<li>总线复用（地址线和数据线复用（可减小芯片管脚数））</li>
<li>信号线数</li>
<li>控制方式</li>
<li>负载能力</li>
</ol>
<h2 id="总线的标准"><a href="#总线的标准" class="headerlink" title="总线的标准"></a>总线的标准</h2><p><img src="https://i.loli.net/2019/11/30/EwtqUfFp3bm7ArR.png" alt=""></p>
<h2 id="总线的控制"><a href="#总线的控制" class="headerlink" title="总线的控制"></a>总线的控制</h2><h3 id="判优控制"><a href="#判优控制" class="headerlink" title="判优控制"></a>判优控制</h3><p>主设备对总线有控制权，从设备相应主设备发来的总线命令</p>
<ol>
<li><p>集中式</p>
<ol>
<li><p>链式查询（结构简单、对电路故障敏感、优先级固定）</p>
<img src="https://i.loli.net/2019/11/30/1WyLFRHQBsCUoXO.png" style="zoom:50%;" />
</li>
<li><p>计数器定时查询</p>
<img src="https://i.loli.net/2019/11/30/dYsXgRK1Wwzija3.png" style="zoom:50%;" />
</li>
<li><p>独立请求（需要的线多）</p>
<p><img src="https://i.loli.net/2019/11/30/ZPzQTxptfFnjl8N.png" alt=""></p>
</li>
</ol>
</li>
<li><p>分布式</p>
</li>
</ol>
<h3 id="通信控制"><a href="#通信控制" class="headerlink" title="通信控制"></a>通信控制</h3><p>总线传输周期：</p>
<ol>
<li>申请分配</li>
<li>寻址</li>
<li>传数</li>
<li>结束（撤销有关信息）</li>
</ol>
<p>通信方式：</p>
<ol>
<li><p>同步通信（定宽的时钟周期、主从模块强制同步）</p>
<p><img src="https://i.loli.net/2019/11/30/OVJbNvyalD16EcH.png" alt=""></p>
</li>
<li><p>异步通信</p>
<ol>
<li>不互锁</li>
<li>半互锁（主设备等待应答）</li>
<li>全互锁（主设备等待应答，从设备等待主设备接收成功的信号）</li>
</ol>
</li>
<li><p>半同步通信</p>
<img src="https://i.loli.net/2019/11/30/tOWKMrPLG8X6gwB.png" style="zoom:50%;" />
</li>
<li><p>分离式通信（高效）</p>
<p>在通信过程中，不占用总线空闲时间，发送命令后断开连接。</p>
<p>各模块都可以申请占用总线，采用同步通信。</p>
</li>
</ol>
<h1 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h1><p>按存储介质分类</p>
<ol>
<li><p>半导体存储器: TTL(集成度低、功耗高、速度快)，MOS（集成度高、功耗低）现代计算机内存主要由MOS型构成</p>
<p>数据易失</p>
</li>
<li><p>磁表面存储器：磁头、载磁体</p>
</li>
<li><p>磁芯存储器</p>
</li>
<li><p>光盘存储器</p>
</li>
</ol>
<p>按存取方式分类：</p>
<ol>
<li>随机访问（存取时间与物理地址无关）<ol>
<li>随机存储器（RAM）</li>
<li>只读存储器（ROM）</li>
</ol>
</li>
<li>串行访问（存取时间与物理时间有关）<ol>
<li>顺序存取存储器：磁带</li>
<li>直接存取存储器：磁盘</li>
</ol>
</li>
</ol>
<p>按作用分类</p>
<ol>
<li>主存储器<ol>
<li>RAM<ol>
<li>静态</li>
<li>动态</li>
</ol>
</li>
<li>ROM<ol>
<li>MROM</li>
<li>PROM</li>
<li>EPROM</li>
<li>EEPROM</li>
</ol>
</li>
</ol>
</li>
<li>Flash Memory</li>
<li>Cache（快于主存，连接主存与CPU）</li>
<li>辅助存储器</li>
</ol>
<h2 id="存储层次"><a href="#存储层次" class="headerlink" title="存储层次"></a>存储层次</h2><p>CPU(10ns)–缓存(20ns)–主存(200ns)–辅存(ms) (数据很老)</p>
<p>主存辅存构成虚拟存储器（用到虚拟地址）</p>
<p>缓存与主存通过硬件建立联系（使用主存地址（实地址），缓存中按内容查找）</p>
<h2 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h2><h3 id="基本组成"><a href="#基本组成" class="headerlink" title="基本组成"></a>基本组成</h3><p><img src="https://i.loli.net/2019/11/30/RrPEw5Sh1z9ZUaW.png" alt=""></p>
<h3 id="存储单元地址分配"><a href="#存储单元地址分配" class="headerlink" title="存储单元地址分配"></a>存储单元地址分配</h3><ol>
<li>高位字节地址为字地址（大尾）</li>
<li>低位字节地址为字地址（小尾）</li>
</ol>
<h3 id="主存技术指标"><a href="#主存技术指标" class="headerlink" title="主存技术指标"></a>主存技术指标</h3><ol>
<li>容量</li>
<li>速度<ol>
<li>存取时间（读出、写入时间）</li>
<li>存取周期（连续两次独立的存储器操作所需最小时间间隔）（一般比存取时间长）</li>
<li>带宽 </li>
</ol>
</li>
</ol>
<h2 id="半导体存芯片"><a href="#半导体存芯片" class="headerlink" title="半导体存芯片"></a>半导体存芯片</h2><h3 id="半导体存储芯片的基本结构"><a href="#半导体存储芯片的基本结构" class="headerlink" title="半导体存储芯片的基本结构"></a>半导体存储芯片的基本结构</h3><blockquote>
<p>译码驱动</p>
<p>存储矩阵</p>
<p>读写电路</p>
</blockquote>
<p>连接存储芯片的线</p>
<ol>
<li>地址线</li>
<li>数据线</li>
<li>片选线<ol>
<li>CS（低电平有效）</li>
<li>CE（）</li>
</ol>
</li>
<li>读写控制线<ol>
<li>WE（低电平写，高电平读）</li>
<li>OE（允许写）+WE（允许读）</li>
</ol>
</li>
</ol>
<h3 id="半导体存储芯片的译码驱动方式"><a href="#半导体存储芯片的译码驱动方式" class="headerlink" title="半导体存储芯片的译码驱动方式"></a>半导体存储芯片的译码驱动方式</h3><ol>
<li>线选法（每个存储单元对应一根线，很费线）（2^n^根)</li>
<li>重合法（2^(n/2+1)^根)</li>
</ol>
<h2 id="随机存取存储器"><a href="#随机存取存储器" class="headerlink" title="随机存取存储器"></a>随机存取存储器</h2><p>静态RAM集成度比动态低，芯片引脚数多（行列地址传送要同时（所以快）），功耗高，速度快，价格高，在计算机中用在需要高速度的地方。</p>
<p>DRAM多用于做主存，SRAM用于做cache。</p>
<h3 id="静态RAM（SRAM）"><a href="#静态RAM（SRAM）" class="headerlink" title="静态RAM（SRAM）"></a>静态RAM（SRAM）</h3><p>eg：Intel 2114</p>
<p>用双端稳态触发器存储01，写操作时从两端写入相反的数据</p>
<p>由行列开关确定要操作的存储单元</p>
<h3 id="动态RAM（DRAM）"><a href="#动态RAM（DRAM）" class="headerlink" title="动态RAM（DRAM）"></a>动态RAM（DRAM）</h3><p>eg：Intel 1103</p>
<img src="https://i.loli.net/2019/11/30/ktHFYLJpVDahwmU.png" style="zoom:50%;" />

<p>用电容存储01，有电容1，无为0。</p>
<p>每隔一段时间要给电容刷新。</p>
<img src="https://i.loli.net/2019/11/30/ns4V3U91lYbIuHa.png" style="zoom:50%;" />

<p>三管动态RAM读出数据与原数据相反，写入数据与原数据相同。</p>
<p>单管读写都反向</p>
<h3 id="动态ROM刷新"><a href="#动态ROM刷新" class="headerlink" title="动态ROM刷新"></a>动态ROM刷新</h3><ol>
<li><p>集中刷新</p>
<p>每个存取周期中有一段时间专门用来刷新，不能读写。</p>
</li>
<li><p>分散刷新</p>
<p>每次读取操作之前都刷新一次，把读取周期加长为2倍，性能下降</p>
</li>
<li><p>异步刷新</p>
<p>把整个存取周期均分，每个小周期刷新一行</p>
</li>
</ol>
<h2 id="只读存储器"><a href="#只读存储器" class="headerlink" title="只读存储器"></a>只读存储器</h2><ol>
<li><p>掩模ROM（MROM）</p>
<p>用户不可修改。行列交叉处有MOS管为1。</p>
</li>
<li><p>PROM（一次性编程）</p>
<p>熔丝连通为1。</p>
</li>
<li><p>EPROM（多次编程）</p>
<p>N型沟道浮动MOS电路。要用紫外线来修改。</p>
</li>
<li><p>EEPROM（多次编程）</p>
<p>电可擦写</p>
</li>
<li><p>flash memory</p>
</li>
</ol>
<h2 id="存储器和CPU的连接"><a href="#存储器和CPU的连接" class="headerlink" title="存储器和CPU的连接"></a>存储器和CPU的连接</h2><p>位扩展（增加存储字长（将多个芯片当做一个来用））：</p>
<p>片选线连在一起，数据线并联，地址线接在一起。</p>
<p>字扩展（增加存储字的数量）：</p>
<p>在多出来的地址线用来做片选。</p>
<p>字位同时扩展</p>
<ol>
<li>地址线的连接</li>
<li>数据线的连接</li>
<li>读写命令线（连接到每一个存储单元）</li>
<li>片选线（包括MREQ信号（当他有效时表明当前整个芯片被选中））</li>
<li>合理选择存储芯片 </li>
</ol>
<h2 id="存储器的校验"><a href="#存储器的校验" class="headerlink" title="存储器的校验"></a>存储器的校验</h2><ol>
<li><p>编码的最小距离</p>
<p>L-1(编码的最小距离)=D(检错位数)+C(纠错位数)</p>
</li>
</ol>
<h3 id="汉明码"><a href="#汉明码" class="headerlink" title="汉明码"></a>汉明码</h3><ol>
<li><p>奇偶校验</p>
</li>
<li><p>分组校验(非划分分组方式)</p>
<p>按二进制位进行分组,第i个二进制为为1则第i组包含这个数</p>
<p>校验位在2^i-1^次方</p>
<p>2^k^&gt;=n+k+1</p>
</li>
</ol>
<h2 id="提高访存速度"><a href="#提高访存速度" class="headerlink" title="提高访存速度"></a>提高访存速度</h2><p>调整主存结构</p>
<ol>
<li><p>单体多字(存储字长大于机器字长)</p>
</li>
<li><p>多体并行</p>
<ol>
<li>高位交叉顺序编址(高位地址决定存储体编号,容易造成某个存储体太繁忙)</li>
<li>低位交叉(因为连续的数据是存放在不同的存储体中,所以在对第一个数据发送请求后的1/4个存取周期后就可以对第二个数据发送请求(因为是另一个存储体),大大提升了存取速度)</li>
</ol>
</li>
<li><p>高性能存储芯片</p>
<ol>
<li><p>SDRAM(同步DRAM) (CPU无需等待)</p>
</li>
<li><p>RDRAM(解决存储带宽问题)</p>
</li>
<li><p>带cache的DRAM</p>
<p>将上次访问的行写入cache,下次如果同行则直接读取(适合猝发式读取)</p>
</li>
</ol>
</li>
</ol>
<h2 id="高速缓冲存储器"><a href="#高速缓冲存储器" class="headerlink" title="高速缓冲存储器"></a>高速缓冲存储器</h2><p> 用SRAM做的</p>
<p>程序的局部性原理：</p>
<ol>
<li>当前使用的数据和指令将在将来被使用</li>
<li>当前数据和指令相邻的数据和指令将在将来被使用</li>
</ol>
<p>工作原理：</p>
<p>将主存(M块)和cache分成相同大小的块(C块) (M&gt;&gt;C)</p>
<p>cache的操作是以块为单位的，取信息时按块号查找</p>
<p>cache的命中率：cpu欲访问的数据在cache中的比率（与容量和块长有关）</p>
<p>块长一 般可取4～8个字</p>
<img src="https://i.loli.net/2019/11/30/XkhNaoCSOsUHQY1.png" style="zoom:50%;" />

<h3 id="cache的写操作"><a href="#cache的写操作" class="headerlink" title="cache的写操作"></a>cache的写操作</h3><ol>
<li><p>写直达法</p>
<p>写操作时既写入cache又写入主存</p>
</li>
<li><p>写回法</p>
<p>只写入cache，当cache数据块退出cache才写会主存（并行计算机需要注意同步）</p>
</li>
</ol>
<h3 id="cache的改进"><a href="#cache的改进" class="headerlink" title="cache的改进"></a>cache的改进</h3><ol>
<li>增加cache的级数（片载cache，片外cache）</li>
<li>统一缓存（）和分立缓存（指令cache和数据cache分离）</li>
</ol>
<h3 id="cache与主存的地址映射"><a href="#cache与主存的地址映射" class="headerlink" title="cache与主存的地址映射"></a>cache与主存的地址映射</h3><ol>
<li><p>直接映射（容易冲突）</p>
<p>主存分区，每个区和cache一样大，每个区内的块只能放入同块号的cache，取数据时比较是不是要取的区号</p>
</li>
<li><p>全相联映射（慢）</p>
<p>块可以放入任一cache块，取数据时要遍历cache</p>
</li>
<li><p>组相联映射（现代计算机常用）</p>
<p>把cache分组，主存分区，每个区大小等于cache的区数。每个块能放在特定的cache组的任意一块。</p>
</li>
</ol>
<p>灵活选用：</p>
<p>靠近cpu的选快的（直接、组数少的组相联）</p>
<h3 id="cache的替换算法"><a href="#cache的替换算法" class="headerlink" title="cache的替换算法"></a>cache的替换算法</h3><ol>
<li>先进先出（FIFO）</li>
<li>近期最少使用（LRU）</li>
</ol>
<h2 id="辅助存储器"><a href="#辅助存储器" class="headerlink" title="辅助存储器"></a>辅助存储器</h2><p>不与CPU直接交换信息</p>
<p>技术指标：</p>
<ol>
<li><p>密度（道密度、位密度（外圈的位密度低））</p>
</li>
<li><p>存储容量</p>
</li>
<li><p>平均寻址时间（寻道时间+等待时间）</p>
<p>辅存速度=寻址时间+磁头读写时间</p>
</li>
<li><p>数据传输率</p>
</li>
<li><p>误码率</p>
</li>
</ol>
<p>硬磁盘存储器类型：</p>
<ol>
<li>固定磁头和移动磁头</li>
<li>可换盘和固定盘</li>
</ol>
<p>硬磁盘存储结构</p>
<p>主机&lt;–&gt;磁盘控制器&lt;–&gt;磁盘驱动器&lt;–&gt;盘片</p>
<h1 id="输入输出系统"><a href="#输入输出系统" class="headerlink" title="输入输出系统"></a>输入输出系统</h1><p>发展</p>
<ol>
<li><p>早期</p>
<p>分散连接,cpu和io串行工作</p>
</li>
<li><p>接口和DMA阶段</p>
<p>并行工作(中断方式、DMA方式)</p>
</li>
<li><p>具有通道结构的阶段</p>
</li>
<li><p>I/O处理机阶段</p>
</li>
</ol>
<h2 id="输入输出系统的组成"><a href="#输入输出系统的组成" class="headerlink" title="输入输出系统的组成"></a>输入输出系统的组成</h2><ol>
<li><p>软件</p>
<ol>
<li><p>IO指令(CPU指令的一部分)</p>
<p>操作码(表明这是IO操作)+命令码(具体的操作)+设备码</p>
</li>
<li><p>通道指令(通道自身的指令)</p>
<p>应用程序中要增加广义IO指令(设备、主存首地址、长度、方向)，操作系统通过参数和广义IO指令编写通道程序。</p>
<p>通道可以带子通道</p>
</li>
</ol>
</li>
<li><p>硬件</p>
</li>
</ol>
<h2 id="主机与IO设备的联系方式"><a href="#主机与IO设备的联系方式" class="headerlink" title="主机与IO设备的联系方式"></a>主机与IO设备的联系方式</h2><ol>
<li><p>IO设备编制方式</p>
<ol>
<li>统一编址</li>
<li>不统一编址</li>
</ol>
</li>
<li><p>设备选址</p>
<p>用设备选择电路识别是否被选中</p>
</li>
<li><p>传输方式</p>
<ol>
<li>串行</li>
<li>并行</li>
</ol>
</li>
<li><p>联络方式</p>
<ol>
<li>立即响应</li>
<li>异步工作采用应答信号</li>
<li>同步</li>
</ol>
</li>
</ol>
<h2 id="IO设备与主机信息传送的控制方式"><a href="#IO设备与主机信息传送的控制方式" class="headerlink" title="IO设备与主机信息传送的控制方式"></a>IO设备与主机信息传送的控制方式</h2><ol>
<li><p>程序查询方式</p>
<p>每次读一个字，并且CPU等待IO，IO-&gt;IO接口-&gt;CPU-&gt;主存</p>
</li>
<li><p>程序中断方式</p>
<p>对1的改进，也是每次读一个字</p>
<p>IO工作分为两部分</p>
<ol>
<li>自身准备（CPU不等待）</li>
<li>与主机交换（向CPU发送中断请求）</li>
</ol>
</li>
<li><p>DMA方式</p>
<p>主存接IO，CPU只有在DMA占用总线时不能使用总线（可以执行不需要使用总线的指令）</p>
</li>
</ol>
<h2 id="IO设备"><a href="#IO设备" class="headerlink" title="IO设备"></a>IO设备</h2><p><img src="https://i.loli.net/2019/11/30/byzJ6H4xLGQIEFR.png" alt="IO设备"></p>
<ul>
<li>人机交互设备</li>
<li>计算机存储设备</li>
<li>机机通信设备</li>
</ul>
<h2 id="IO接口"><a href="#IO接口" class="headerlink" title="IO接口"></a>IO接口</h2><p>总线连接方式的IO接口</p>
<ol>
<li>设备选择线</li>
<li>数据线</li>
<li>命令线</li>
<li>状态线</li>
</ol>
<p>基本组成</p>
<p><img src="https://i.loli.net/2019/11/30/ez3Y7XEhbZgix61.png" alt="IO接口基本组成"></p>
<h2 id="程序查询方式"><a href="#程序查询方式" class="headerlink" title="程序查询方式"></a>程序查询方式</h2> <img src="https://i.loli.net/2019/11/30/3xw7RNvZhC4Aj8G.png" style="zoom:50%;" />

<p>按照优先级检查设备</p>
<p>流程：</p>
<img src="https://i.loli.net/2019/11/30/1XxtRucEzV34KIe.png" style="zoom:50%;" />

<p>接口电路：</p>
<img src="https://i.loli.net/2019/11/30/K4ZxEkINFGXblyz.png" style="zoom:50%;" />

<h2 id="程序中断方式"><a href="#程序中断方式" class="headerlink" title="程序中断方式"></a>程序中断方式</h2><p>接口电路:</p>
<ol>
<li><p>中断请求触发器（INTR）、中断屏蔽触发器（MASK）</p>
</li>
<li><p>排队器（硬件（在CPU内或接口电路）、软件）</p>
</li>
<li><p>中断向量地址形成部件（形成中断程序地址）</p>
<p>软件：</p>
<p>硬件向量法：硬件产生向量地址，再由向量地址找到入口地址</p>
<p>​    中断向量：和中断程序相关的地址（断地址、偏移量、状态信息</p>
<img src="https://i.loli.net/2019/11/30/FwMHt7WqDP6Qfxn.png" style="zoom:50%;" />

</li>
</ol>
<p>中断程序的流程</p>
<ol>
<li>保护现场<ul>
<li>硬件自动保护断点信息（中断隐指令</li>
<li>寄存器内容（进栈指令</li>
</ul>
</li>
<li>中断服务</li>
<li>恢复现场</li>
<li>中断返回</li>
</ol>
<p>单重中断和多重中断</p>
<h2 id="DMA方式"><a href="#DMA方式" class="headerlink" title="DMA方式"></a>DMA方式</h2><p>DMA与主存交换数据的三种方式</p>
<ol>
<li><p>停止CPU访问主存</p>
<p>在传输间隔里，主存未工作，但CPU不能访问主存</p>
</li>
<li><p>周期窃取（访存周期）</p>
<p>在DMA不使用主存时（访存间隔）让给CPU。若同时请求则DMA优先</p>
</li>
<li><p>DMA与CPU交替访问</p>
</li>
</ol>
<img src="https://i.loli.net/2019/11/30/7RIEXfiBr8YnpbV.png" style="zoom:50%;" />

<p>DMA传送过程</p>
<ol>
<li>预处理（方向、地设备址、主存地址、字数）（通过输入输出指令设置）</li>
<li>数据传送</li>
<li>后处理（由中断程序完成）<ul>
<li>校验数据是否正确</li>
<li>是否继续使用DMA</li>
</ul>
</li>
</ol>
<p><img src="https://i.loli.net/2019/11/30/PhHA3drOwejZxEB.png" alt=""></p>
<p>DMA接口的类型</p>
<ol>
<li>选择型</li>
<li>多路型（多个外部设备同时进行数据准备，传输时自能一个）</li>
</ol>
<h1 id="计算机的运算方式"><a href="#计算机的运算方式" class="headerlink" title="计算机的运算方式"></a>计算机的运算方式</h1><h2 id="原码表示法"><a href="#原码表示法" class="headerlink" title="原码表示法"></a>原码表示法</h2><p>整数</p>
<img src="https://i.loli.net/2019/11/30/oeuVhm5b7TqxRwv.png" style="zoom:50%;" />

<p>小数</p>
<img src="https://i.loli.net/2019/12/01/dfNrGagVupwKXMk.png" style="zoom:50%;" />

<h2 id="补码表示法"><a href="#补码表示法" class="headerlink" title="补码表示法"></a>补码表示法</h2><p>整数</p>
<img src="https://i.loli.net/2019/12/01/uA3hiFGwY7abZ5Q.png" alt="image-20191201094208242.png" style="zoom:50%;" />

<p>小数</p>
<img src="https://i.loli.net/2019/12/01/1Zstp7TDyVHxKeu.png" alt="image-20191201094247670.png" style="zoom:50%;" />

<h2 id="反码表示法"><a href="#反码表示法" class="headerlink" title="反码表示法"></a>反码表示法</h2><p>整数</p>
<img src="https://i.loli.net/2019/12/01/oqbFcSdxMfvC235.png" alt="image.png" style="zoom:50%;" />

<p>小数</p>
<img src="https://i.loli.net/2019/12/01/DJIz5n6hAPlZet1.png" alt="image.png" style="zoom:50%;" />

<h2 id="移码表示法"><a href="#移码表示法" class="headerlink" title="移码表示法"></a>移码表示法</h2><p>通常用来表示浮点数中的阶码，没有小数表示</p>
<p>补码和移码符号位相反</p>
<img src="https://i.loli.net/2019/12/01/PV7qHpLKd8rGQCu.png" alt="image.png" style="zoom:50%;" />

<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><img src="https://i.loli.net/2019/12/01/YBHqsjhmak3FPLM.png" alt="浮点数的表示形式" style="zoom:50%;" />

<p>尾数用定点小数来表示，成为规格化数</p>
<h3 id="机器0"><a href="#机器0" class="headerlink" title="机器0"></a>机器0</h3><p>尾数为0时，无论阶码为多少，都当成机器0</p>
<p>阶码小于等于最小阶码时，都当成机器0</p>
<img src="https://i.loli.net/2019/12/01/rIm5uT6NndhOXaH.png" alt="image.png" style="zoom:50%;" />

<h2 id="IEEE754标准"><a href="#IEEE754标准" class="headerlink" title="IEEE754标准"></a>IEEE754标准</h2><img src="https://i.loli.net/2019/12/01/igBjRZt7UlTpSD5.png" alt="image.png" style="zoom:50%;" />

<h2 id="定点运算"><a href="#定点运算" class="headerlink" title="定点运算"></a>定点运算</h2><h3 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h3><p>算术移位规则</p>
<img src="https://i.loli.net/2019/12/01/JGCSEdT7bvQNLVX.png" style="zoom:50%;" />

<p>逻辑移位不考虑符号位，算术移位考虑</p>
<h3 id="加减法运算"><a href="#加减法运算" class="headerlink" title="加减法运算"></a>加减法运算</h3><img src="https://i.loli.net/2019/12/01/G4TmF2cJUixRwKo.png" style="zoom:50%;" />

<p>溢出判断</p>
<p>一位符号位判断溢出：</p>
<img src="https://i.loli.net/2019/12/01/615fHzdZMLlnj9p.png" style="zoom:50%;" />

<p>两位符号位判断溢出：</p>
<img src="https://i.loli.net/2019/12/01/QWRe4icBh2GsrMC.png" style="zoom:50%;" />

<p>补码加减法硬件配置</p>
<img src="https://i.loli.net/2019/12/01/cHOFf62usAEQBDP.png" style="zoom:50%;" />

<p>在求补过程中的加1操作变成 在全加器最低位的进位置1即可</p>
<h3 id="乘法运算"><a href="#乘法运算" class="headerlink" title="乘法运算"></a>乘法运算</h3><p>原码乘法</p>
<p>通过n次加法、n次移位实现乘法</p>
<p>把部分积放在高位，乘数放在低位、每次根据乘数最后一位觉得部分积要加0还是加被乘数，加完后整体右移一位，部分积低位移入乘数。</p>
<img src="https://i.loli.net/2019/12/02/BTkPtMAnKOe9Ryv.png" style="zoom:50%;" />

<h3 id="除法运算"><a href="#除法运算" class="headerlink" title="除法运算"></a>除法运算</h3><ol>
<li><p>恢复余数法</p>
<p>余数减去减数，若结果小于0，则恢复余数并上商0，左移一位再减。否则上商1，左移一位。</p>
</li>
<li><p>不恢复余数法(加减交替法)</p>
<p>余数减去减数，若结果小于0，上商0，左移一位，下一步做的是加上y^<em>^。否则上商1，左移一位，下一步做的是减去y^</em>^。</p>
</li>
</ol>
<img src="https://i.loli.net/2019/12/02/Po8GwQR7kTLV6ps.png" style="zoom:50%;" />

<h2 id="浮点运算"><a href="#浮点运算" class="headerlink" title="浮点运算"></a>浮点运算</h2><h3 id="加减法"><a href="#加减法" class="headerlink" title="加减法"></a>加减法</h3><ol>
<li><p>对阶</p>
<p>小阶向大阶对齐（可能会丢失精度）</p>
</li>
<li><p>尾数就和</p>
</li>
<li><p>规格化</p>
<p>-1/2的补码不是规格化的数</p>
<ol>
<li>左规</li>
<li>右规</li>
</ol>
</li>
<li><p>舍入</p>
<ol>
<li>0舍1入法</li>
<li>恒置1法</li>
</ol>
</li>
<li><p>溢出判断</p>
<p><img src="https://i.loli.net/2019/12/02/DgKLnHW8IbGFovw.png" alt=""></p>
</li>
</ol>
<h2 id="算术逻辑单元"><a href="#算术逻辑单元" class="headerlink" title="算术逻辑单元"></a>算术逻辑单元</h2><p>ALU是组合逻辑电路，不能保存结果。</p>
<h3 id="并行加法器"><a href="#并行加法器" class="headerlink" title="并行加法器"></a>并行加法器</h3><p>由全加器串在一起</p>
<p><img src="https://i.loli.net/2019/12/02/tWzZXwnLi2EVKPp.png" alt=""></p>
<h3 id="串行进位链"><a href="#串行进位链" class="headerlink" title="串行进位链"></a>串行进位链</h3><p>将进位单独算出来</p>
<p><img src="https://i.loli.net/2019/12/02/kiFmUWYMer5NntT.png" alt=""></p>
<p>将每一级依次由与非门串起来，传输延迟时间会叠加，电路简单</p>
<h3 id="并行进位链"><a href="#并行进位链" class="headerlink" title="并行进位链"></a>并行进位链</h3><p>将每位个低进位都当做高进位的输入，传输延迟时间低，电路复杂（与或非门）</p>
<h3 id="单重分组跳跃进位链"><a href="#单重分组跳跃进位链" class="headerlink" title="单重分组跳跃进位链"></a>单重分组跳跃进位链</h3><p>分成若干小组，组内同时产生，组间串起来</p>
<h3 id="双重分组跳跃进位链"><a href="#双重分组跳跃进位链" class="headerlink" title="双重分组跳跃进位链"></a>双重分组跳跃进位链</h3><p>分成若干个大组，大组又分成小组</p>
<p>大组间串，小组间同时产生，小组内同时产生</p>
<p>小组内并没有生成小组的进位，而是生成D和T，跟其他小组的D和T一起，再生成大组的进位（大组的进位不是一个进位，而是多个小组的最高位）。</p>
<h1 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h1><h2 id="机器指令"><a href="#机器指令" class="headerlink" title="机器指令"></a>机器指令</h2><p>指令的一般格式：操作码+地址码</p>
<h3 id="操作码"><a href="#操作码" class="headerlink" title="操作码"></a>操作码</h3><ol>
<li><p>固定长度</p>
<p>用于指令字长较长的情况</p>
</li>
<li><p>长度可变</p>
</li>
<li><p>操作码扩展技术</p>
<ul>
<li><p>保留码点</p>
<p>短操作码不能是长操作码的前缀</p>
</li>
<li><p>用某一位做扩展标志</p>
</li>
</ul>
</li>
</ol>
<h3 id="地址码"><a href="#地址码" class="headerlink" title="地址码"></a>地址码</h3><p>用硬件资源代替一些地址码的一些字段,可以减小指令长度,减少访存次数(eg:acc)</p>
<p>当地址字段为寄存器时,指令字长可以缩短(因为寄存器少)</p>
<h2 id="操作数"><a href="#操作数" class="headerlink" title="操作数"></a>操作数</h2><p>存放方式:大端序、小端序</p>
<ol>
<li><p>从任意位置开始存储</p>
<p>不浪费存储资源</p>
<p>每个数据直接存在上一个数据的后面，读写时慢，读写控制复杂。</p>
</li>
<li><p>从一个存储字的起始地址开始</p>
<p>很浪费存储资源</p>
<p>快、每个数据可在一个存储周期内完成读取</p>
</li>
<li><p>边界对准（数据存放的起始地址是数据长度的整数倍）</p>
<p>前两种的折中</p>
</li>
</ol>
<h2 id="操作类型"><a href="#操作类型" class="headerlink" title="操作类型"></a>操作类型</h2><ul>
<li><p>数据传送</p>
</li>
<li><p>算数逻辑操作</p>
</li>
<li><p>移位操作</p>
</li>
<li><p>转移指令</p>
<ul>
<li><p>无条件转移‘</p>
</li>
<li><p>条件转移</p>
</li>
<li><p>调用和返回</p>
</li>
<li><p>陷阱</p>
<p>意外事故的中断，一般不直接给用户使用。由cpu自动执行（称为隐指令）（也有给用户使用的XD</p>
</li>
</ul>
</li>
<li><p>输入输出</p>
</li>
</ul>
<h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><h3 id="指令寻址"><a href="#指令寻址" class="headerlink" title="指令寻址"></a>指令寻址</h3><p>顺序：pc+1（1代表一条指令的长度）</p>
<p>跳跃</p>
<h3 id="数据寻址"><a href="#数据寻址" class="headerlink" title="数据寻址"></a>数据寻址</h3><p>操作码+寻址特征+形式地址</p>
<ol>
<li><p>立即寻址</p>
<p>形式地址就是操作数（称作立即数）</p>
</li>
<li><p>直接寻址</p>
<p>有效地址就是形式地址</p>
<p>操作数的地址不易修改</p>
</li>
<li><p>隐含寻址操作数地址隐含在操作码中</p>
<p>eg：acc</p>
</li>
<li><p>间接寻址</p>
<p>形式地址是操作数地址的地址</p>
<p>可扩大寻址地址、便于编程</p>
<p>可以把用一位来表示当前地址是不是真正的操作数的地址，不是则继续进行跳转，以此实现多层的间接寻址。</p>
</li>
<li><p>寄存器寻址</p>
<p>有效地址为寄存器编号</p>
<p>快、指令短</p>
</li>
<li><p>寄存器间接寻址</p>
<p>操作数的地址存在寄存器中</p>
<p>便于实现循环（改寄存器的东西速度快）</p>
</li>
<li><p>基址寻址</p>
<ol>
<li><p>用专用寄存器做基址寄存器、形式地址+基址寄存器的值为真实地址</p>
<p>有利于多道程序，多道程序分时执行时、将程序的起始地址放在BR，动态地形成操作数地址（称作程序的动态定位）。</p>
<p>BR的内容由系统或者系统管理员决定、用户不行</p>
</li>
<li><p>用通用寄存器做基址寄存器，用户可以决定用哪个寄存器做基址寄存器、但是不能决定寄存器里的内容</p>
</li>
</ol>
</li>
<li><p>变址寻址</p>
<p>和基址寻址差不多、用户可以修改寄存器内的内容</p>
<p>访问数组时很适合</p>
</li>
<li><p>相对寻址</p>
<p>形式地址为相对当前PC的偏移量</p>
<p>适合程序浮动（广泛用于转移指令）</p>
</li>
<li><p>堆栈寻址</p>
<ol>
<li><p>硬堆栈</p>
<p>多个寄存器构成栈顶，内存做栈底，运算数据和结果都在栈顶的寄存器中。</p>
</li>
<li><p>软堆栈</p>
<p>指定的存储空间</p>
</li>
</ol>
<p>栈顶地址由SP寄存器指出，通常情况下，栈顶是低地址</p>
</li>
</ol>
<h2 id="指令集设计"><a href="#指令集设计" class="headerlink" title="指令集设计"></a>指令集设计</h2><ol>
<li><p>兼容性</p>
<p>兼容旧系统</p>
</li>
<li><p>操作类型</p>
<p>指令个数、使用难易程度</p>
</li>
<li><p>数据类型</p>
</li>
<li><p>指令格式</p>
<p>指令长度是否固定</p>
<p>操作码位数、是否扩展</p>
<p>地址码位数、地址个数</p>
</li>
<li><p>寻址方式</p>
</li>
<li><p>寄存器个数</p>
</li>
</ol>
<h2 id="RISC技术"><a href="#RISC技术" class="headerlink" title="RISC技术"></a>RISC技术</h2><p>RISC(Reduced Instruction Set Computer)</p>
<p>CISC(Complex Instruction Set Computer)</p>
<p>RISC：</p>
<ol>
<li>选择使用频率高的简单指令来组成复杂指令</li>
<li>指令长度固定、种类少、寻址方式少</li>
<li>只有LOAD、STORE指令能访存</li>
<li>CPU中多个通用寄存器</li>
<li>采用流水技术、一个周期内完成一条指令</li>
<li>采用组合逻辑实现控制器</li>
</ol>
<p>CISC：</p>
<ol>
<li>使用频率参差不齐</li>
<li>长度不固定、指令种类多、寻址方式多</li>
<li>访存不受限制</li>
<li>CPU中有专用寄存器</li>
<li>大多数指令需要多个时钟周期</li>
<li>采用微程序控制器</li>
</ol>
<p>RISC更能充分利用芯片面积、更能提高计算机运算速度、便与设计、降低成本、不易实现指令系统兼容</p>
<p>现代处理器中RISC和CISC在结合</p>
<h1 id="CPU的结构和功能"><a href="#CPU的结构和功能" class="headerlink" title="CPU的结构和功能"></a>CPU的结构和功能</h1><h2 id="CPU的基本结构"><a href="#CPU的基本结构" class="headerlink" title="CPU的基本结构"></a>CPU的基本结构</h2><h3 id="CPU的功能"><a href="#CPU的功能" class="headerlink" title="CPU的功能"></a>CPU的功能</h3><ol>
<li>指令控制</li>
<li>操作控制</li>
<li>时间控制</li>
<li>处理中断</li>
<li>数据加工</li>
</ol>
<h3 id="CPU的结构"><a href="#CPU的结构" class="headerlink" title="CPU的结构"></a>CPU的结构</h3><p><img src="https://i.loli.net/2019/12/03/H4BCVyAK9m32keP.png" alt=""></p>
<h3 id="CPU的寄存器"><a href="#CPU的寄存器" class="headerlink" title="CPU的寄存器"></a>CPU的寄存器</h3><ol>
<li><p>用户可见寄存器</p>
<ol>
<li>通用寄存器</li>
<li>数据寄存器</li>
<li>地址寄存器</li>
<li>条件码寄存器（作为程序分支的依据</li>
</ol>
</li>
<li><p>控制寄存器</p>
<p>PC、MAR、MDR、IR</p>
</li>
<li><p>状态寄存器</p>
<p>存放程序状态字（PSW寄存器（存放程序断点时的现场状态（可能会很长）））、条件码</p>
</li>
</ol>
<h3 id="控制单元和中断系统"><a href="#控制单元和中断系统" class="headerlink" title="控制单元和中断系统"></a>控制单元和中断系统</h3><p>CU：产生全部指令的微操作命令<strong>序列</strong></p>
<ol>
<li>组合逻辑设计（硬连线逻辑（速度快））</li>
<li>微程序设计（可以做复杂功能）</li>
</ol>
<h2 id="指令周期"><a href="#指令周期" class="headerlink" title="指令周期"></a>指令周期</h2><p>取出一条指令并执行的全部时间</p>
<p>取指-&gt;(间址)-&gt;分析(操作码、寻址方式)-&gt; 执行-&gt;(中断)</p>
<p>有些指令没有执行操作(NOP(空指令))</p>
<p>指令周期可以加入间址周期(取操作数)</p>
<p>指令周期可以加入中断周期</p>
<h2 id="指令流水线"><a href="#指令流水线" class="headerlink" title="指令流水线"></a>指令流水线</h2><p>并行:</p>
<ol>
<li>并发</li>
<li>同时</li>
</ol>
<p>并行的等级</p>
<ol>
<li>过程级(程序)</li>
<li>指令级</li>
</ol>
<h3 id="指令流水线的原理"><a href="#指令流水线的原理" class="headerlink" title="指令流水线的原理"></a>指令流水线的原理</h3><ul>
<li>指令的串行执行</li>
</ul>
<img src="https://i.loli.net/2019/12/08/ABH45P8IfUYsjgp.png" style="zoom:50%;" />

<ul>
<li>指令的二级流水</li>
</ul>
<img src="https://i.loli.net/2019/12/08/EjkD7PIFOpAg3f9.png" style="zoom:50%;" />

<ul>
<li>影响指令流水效率的因素</li>
</ul>
<ol>
<li>执行时间&gt;取址时间</li>
<li>条件转移指令必须等上一条指令结束才能确定下一条指令的地址</li>
<li>不同指令对同一功能部件同时访问<ul>
<li>停顿</li>
<li>指令存储器与数据存储器分开</li>
<li>指令预取</li>
</ul>
</li>
<li>前面指令的操作影响后面的数据<ul>
<li>推后法(等待)</li>
<li>旁路技术(上条指令对当前数据处理完后直接送到运算器(而不是存到存储器))</li>
</ul>
</li>
<li>条件转移前对某些指令的执行就没用了(白给)</li>
</ol>
<p>流水线吞吐率:</p>
<p>单位时间内执行的指令条数/输出结果数</p>
<p>加速比S<del>p</del>:</p>
<p>m段流水线比上非流水线的速度</p>
<p>效率:</p>
<p>流水线刚开始运行(建立时间)时候和结束的时候(排空时间)有浪费</p>
<p>运行的时空区/总的时空区</p>
<img src="https://i.loli.net/2019/12/08/iSD6alsoA2ejXrU.png" style="zoom:50%;" />

<p>流水线的多发技术:</p>
<ol>
<li><p>超标量技术</p>
<p>每个时钟周期并发多条独立指令(挑选能够同时执行的指令)</p>
</li>
<li><p>超流水技术</p>
<p>一个时钟周期内再分段,一个时钟周期对一个功能部件使用多次</p>
<p>不能调整指令的执行顺序</p>
</li>
<li><p>超长指令字技术</p>
<p>由编译程序挖掘出指令间潜在的并行性</p>
<p>将这些指令组合成一条指令(超长)(减少取值时间)</p>
</li>
</ol>
<p>流水线的结构</p>
<p>取指-&gt;译码-&gt;形成地址-&gt;取数-&gt;执行-&gt;回写</p>
<h3 id="运算流水线"><a href="#运算流水线" class="headerlink" title="运算流水线"></a>运算流水线</h3><p>对阶-&gt;尾数求和-&gt;规格化</p>
<h2 id="中断系统"><a href="#中断系统" class="headerlink" title="中断系统"></a>中断系统</h2><p>原因:</p>
<ol>
<li>人为设置</li>
<li>程序事故</li>
<li>硬件故障</li>
<li>IO设备</li>
<li>外部事件</li>
</ol>
<h3 id="中断请求标记和判优"><a href="#中断请求标记和判优" class="headerlink" title="中断请求标记和判优"></a>中断请求标记和判优</h3><p>中断请求标记INTR</p>
<p>多个INTR组成中断请求标记寄存器</p>
<p>可以放在CPU内或各个中断源的接口电路</p>
<p>判优逻辑:</p>
<ol>
<li>硬件实现(排队器)</li>
<li>软件实现(软件查询)</li>
</ol>
<h3 id="中断服务程序入口地址"><a href="#中断服务程序入口地址" class="headerlink" title="中断服务程序入口地址"></a>中断服务程序入口地址</h3><ol>
<li>硬件向量法</li>
<li>软件查询法</li>
</ol>
<h3 id="中断隐指令"><a href="#中断隐指令" class="headerlink" title="中断隐指令"></a>中断隐指令</h3><ol>
<li>保护程序断点</li>
<li>寻找服务程序入口地址</li>
<li>硬件关中断</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
        <category>学校课程</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>点分治笔记</title>
    <url>/2019/11/04/%E7%82%B9%E5%88%86%E6%B2%BB/</url>
    <content><![CDATA[<center><font size = 5>点分治</font></center>
一般用来处理大规模树上路径信息，例如树上路径长度的和。暴力是O(n^2)的，点分治可以O(nlogn)做。

<a id="more"></a>

<p>随便选一个根节点root，其子树中的路径可以分为经过根节点的(1)和不经过根节点的(2)。而经过根节点的又可以分为以根节点为端点(3)的和不以根节点为端点的(4)。显然(4)可以由两条(3)路径合并而成,而不断更换根节点后，我们就可以得到整棵树的路径信息了。</p>
<p>对与一颗高度为h的树，我们以每一层节点为根节点时，需要遍历的是这一层根节点的子树，所以对于每一层来说，遍历的时间复杂度是O(n)，总的时间复杂度就是O(hｎ)。</p>
<p>每次选重心为根节点的话，h是等于logn的，所以时间复杂度是O(nlogn)。</p>
<p>总的来说，点分治的过程是：</p>
<ol>
<li>选定根节点(树的重心)，遍历其子树获得信息(一般为到根节点的路径长度)</li>
<li>通过一些方法，用其子节点所在的每颗子树间的信息来统计答案。</li>
<li>在各个子树选择根节点(子树的重心)，继续统计(已经当过根节点的无需再统计)</li>
</ol>
<h1 id="BZOJ-1468"><a href="#BZOJ-1468" class="headerlink" title="BZOJ-1468"></a><a href="http://darkbzoj.tk/problem/1468" target="_blank" rel="noopener">BZOJ-1468</a></h1><details><summary>Tree</summary>
给你一棵TREE,以及这棵树上边的距离.问有多少对点它们两者间的距离小于等于K.(n<=40000) </details>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e4</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> v, w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[N];</span><br><span class="line"><span class="keyword">int</span> RT, RTMAX, dis[N], diss[N], siz[N], sum, cnt, ans, k;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getrt</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;		<span class="comment">// 找根节点</span></span><br><span class="line">  <span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line">  siz[u] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : G[u]) <span class="keyword">if</span> (e.v != fa &amp;&amp; !vis[e.v]) &#123;	<span class="comment">// 保证在子树中</span></span><br><span class="line">    getrt(e.v, u);</span><br><span class="line">    siz[u] += siz[e.v];</span><br><span class="line">    mx = <span class="built_in">max</span>(mx, siz[e.v]);</span><br><span class="line">  &#125;</span><br><span class="line">  mx = <span class="built_in">max</span>(mx, sum - siz[u]);</span><br><span class="line">  <span class="keyword">if</span> (mx &lt; RTMAX) RTMAX = mx, RT = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;		<span class="comment">// 得到子树信息</span></span><br><span class="line">  diss[++cnt] = dis[u];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : G[u]) <span class="keyword">if</span> (e.v != fa &amp;&amp; !vis[e.v]) &#123;</span><br><span class="line">    dis[e.v] = dis[u] + e.w;</span><br><span class="line">    getdis(e.v, u);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> val)</span> </span>&#123;		<span class="comment">// 对当前根节点统计答案</span></span><br><span class="line">  cnt = <span class="number">0</span>, dis[u] = val;</span><br><span class="line">  getdis(u, <span class="number">-1</span>);</span><br><span class="line">  sort(diss + <span class="number">1</span>, diss + cnt + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">int</span> l = <span class="number">1</span>, r = cnt, ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (l &lt;= r) (diss[r] + diss[l] &lt;= k) ? (ret += r - l, ++l) : (--r);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfz</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;		<span class="comment">// 点分治主函数</span></span><br><span class="line">  vis[u] = <span class="number">1</span>;</span><br><span class="line">  ans += cal(u, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : G[u]) <span class="keyword">if</span> (!vis[e.v]) &#123;</span><br><span class="line">    ans -= cal(e.v, e.w);</span><br><span class="line">    RTMAX = <span class="number">0x3f3f3f3f</span>, sum = siz[e.v];</span><br><span class="line">    getrt(e. v, <span class="number">-1</span>);</span><br><span class="line">    dfz(RT);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">int</span> n, u, v, w;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w, G[u].push_back(&#123;v, w&#125;), G[v].push_back(&#123;u, w&#125;);</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">  RTMAX = <span class="number">0x3f3f3f3f</span>, sum = n;</span><br><span class="line">  getrt(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">  dfz(RT);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个模板题中要求距离小于k的点对，对每个节点到根节点的距离排序后，双指针搞一下就可得出每个根节点的答案，但是因为统计的两个距离可能在同一颗子树内，所以要减去每个子节点为根的答案来去重。因为要排序，所以复杂度会多一个log，为O(n(logn)^2)。</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>点分治</tag>
      </tags>
  </entry>
  <entry>
    <title>小白的第一次Arch安装</title>
    <url>/2019/07/04/Arch/</url>
    <content><![CDATA[<center><b>小白的第一次Arch安装</b><center>

<a id="more"></a>


<h1 id="0"><a href="#0" class="headerlink" title="0"></a>0</h1><p>今天上午刚考完试，美好的假期总能使人忘却烦恼，仿佛挂科这种事情从来就没发生过一样。在跑跑卡丁车上度过了一个下午之后，理智（万恶的防沉迷系统）告诉我，假期不能就这么沉沦在游戏之中。刚好想起硬盘里小bug不断的Manjaro，便有了这次重装。写篇博客记录一下安装过程，下次就不用去翻别人博客了，hhh。</p>
<p>本来想着自己搞个LFS，然而看了几分钟官方手册后我就知道，LFS不是我这种弱鸡该碰的东西。然后看了看Gentoo，emm，貌似很繁琐，也放弃了。于是选择了Arch（aur、archwiki万岁）。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>怎么安装Arch？当然是（对着<a href="[https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)](https://wiki.archlinux.org/index.php/Installation_guide_(简体中文)">文档</a>）直接装啦。</p>
<p>下好<a href="https://www.archlinux.org/download/" target="_blank" rel="noopener">镜像</a>，直接做启动盘，验证签名是不可能验证的，这辈子都不可能的。</p>
<p>分区什么的之前分好了，因为是双系统所以已经有一个引导分区，就分了一个根分区。</p>
<h2 id="挂载分区（请将xy换成自己的分区号）"><a href="#挂载分区（请将xy换成自己的分区号）" class="headerlink" title="挂载分区（请将xy换成自己的分区号）"></a>挂载分区（请将xy换成自己的分区号）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mkfs.ext4 /dev/sdxY　　　　　　　//格式化根分区</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mount /dev/sdxY /mnt			//挂载根分区</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mkdir /mnt/boot</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mount /dev/sdxY /mnt/boot		//挂载引导分区</span></span><br></pre></td></tr></table></figure>

<p>##　安装基本包</p>
<p>因为要联网安装，所以要先联网，我是插上网线就完事了。(这里要吐槽一下学校的校园网，要锐捷认证才能上网，所以我要先切会Windows认证锐捷，然后把锐捷kill了再回livecd才能上网。)</p>
<h4 id="更新系统时间"><a href="#更新系统时间" class="headerlink" title="更新系统时间"></a>更新系统时间</h4><p>虽然不知道有啥用，但照着做就对了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> timedatectl <span class="built_in">set</span>-ntp <span class="literal">true</span></span></span><br></pre></td></tr></table></figure>

<h4 id="选择镜像源"><a href="#选择镜像源" class="headerlink" title="选择镜像源"></a>选择镜像源</h4><p>（加到最前面，优先级最高）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">＃ vim /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>

<p>添加清华、浙大源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Server = http://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">Server = http://mirrors.zju.edu.cn/archlinux/$repo/os/$arch</span><br></pre></td></tr></table></figure>

<h4 id="安装基本包"><a href="#安装基本包" class="headerlink" title="安装基本包"></a>安装基本包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pacstrap /mnt base base-devel</span></span><br></pre></td></tr></table></figure>

<h2 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h2><h4 id="配置Fastab"><a href="#配置Fastab" class="headerlink" title="配置Fastab"></a>配置Fastab</h4><p>这玩意好像是用来自动挂载分区的，我不太清楚QAQ</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> genfstab -L /mnt &gt;&gt; /mnt/etc/fstab</span></span><br></pre></td></tr></table></figure>

<h4 id="配置系统设置"><a href="#配置系统设置" class="headerlink" title="配置系统设置"></a>配置系统设置</h4><ol>
<li>chroot到新系统，然后快乐的设置8</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> arch-chroot /mnt</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>设置时区</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hwclock --systohc		      //同步硬件时间为系统时间</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>装上要用的包和软件</li>
</ol>
<p>因为我校园网要锐捷认证才能联网，所以等会直接进Arch是没网的，所以先装些软件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">　pacman -S vim dialog wpa_supplicant ntfs-3g networkmanager chromium</span></span><br></pre></td></tr></table></figure>

<p>本地化</p>
<ol start="4">
<li>设置locale，用来设置系统语言的</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/locale.gen</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br><span class="line">zh_TW.UTF-8 UTF-8</span><br><span class="line">zh_HK.UTF-8 UTF-8</span><br></pre></td></tr></table></figure>

<p>生成locale信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># locale-gen</span><br></pre></td></tr></table></figure>

<p>编辑本地化文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim /etc/locale.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>配置网络相关东西（我不太懂，照做了）</li>
</ol>
<p>设置主机名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim /etc/hostname</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">myhostname</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim /etc/hosts</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1	localhost</span><br><span class="line">::1		localhost</span><br><span class="line">127.0.1.1	myhostname.localdomain	myhostname</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>设置root密码</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># passwd</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>安装Intel-ucode</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pacman -S intel-ucode</span><br></pre></td></tr></table></figure>

<h2 id="Grub引导"><a href="#Grub引导" class="headerlink" title="Grub引导"></a>Grub引导</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pacman -S os-prober			//用来配合grub检测已有系统,生成启动项</span><br><span class="line"># pacman -S grub efibootmgr</span><br><span class="line"># grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub</span><br><span class="line"># grub-mkconfig -o /boot/grub/grub.cfg 			// 生成配置文件</span><br></pre></td></tr></table></figure>

<h2 id="图形界面安装"><a href="#图形界面安装" class="headerlink" title="图形界面安装"></a>图形界面安装</h2><p><del>这里我选择的是DDE，其实我比较喜欢KDE，但在沙雕群友的推荐下，还是选择了DDE，DDE的开箱颜值是很高的，基本什么都不做就能用得挺爽。但是自定义方面的东西确实不如KDE。</del>（ljDDE）</p>
<ol>
<li>换源（不记得有没有换了，换源和前面换源的方法一样）</li>
<li>安装</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pacman -Syu</span><br><span class="line"># pacman -S xorg xorg-server		//x window服务</span><br><span class="line"># pacman -S deepin deepin-extra		//dde本尊</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置登录管理器</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim /etc/lightdm/lightdm.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">greeter-session=lightdm-deepin-greeter</span><br></pre></td></tr></table></figure>

<p>启动lightdm服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># systemctl enable lightdm.service</span><br><span class="line"># systemctl start lightdm.service</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>完事</li>
</ol>
<p>本来是重启就完事了,但我重启后是白屏。。也不知道为什么，然后我创建了个用户就好了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># useradd -m yourname</span><br><span class="line"># passwd</span><br></pre></td></tr></table></figure>

<p>让该用户能够使用sudo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim visudo</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yourname ALL=(ALL)		ALL</span><br></pre></td></tr></table></figure>

<p>然后就可以快乐的使用了。</p>
<h2 id="pacman源设置"><a href="#pacman源设置" class="headerlink" title="pacman源设置"></a>pacman源设置</h2><p>加入multilib和archlinuxcn</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/pacman.conf</span><br></pre></td></tr></table></figure>

<p>去掉multilib那两行的注释符号</p>
<p>加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://cdn.repo.archlinuxcn.org/$arch</span><br></pre></td></tr></table></figure>

<p>导入archlinuxcn的秘钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure>

<h2 id="中文输入法和常用软件"><a href="#中文输入法和常用软件" class="headerlink" title="中文输入法和常用软件"></a>中文输入法和常用软件</h2><p>安装git</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S git</span><br></pre></td></tr></table></figure>

<p>安装yay（yay是真的好用啊！）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone https://aur.archlinux.org/yay.git</span><br><span class="line">$ cd yay</span><br><span class="line">$ makepkg -si</span><br></pre></td></tr></table></figure>

<p>安装搜狗拼音，因为谷歌拼音那辣鸡的词汇库是真的难用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S fcitx-sogoupinyin</span><br><span class="line">$ sudo pacman -S fcitx-qt4</span><br></pre></td></tr></table></figure>

<p>要配置环境变量才能用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim ~/.pam_environment</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GTK_IM_MODULE=fcitx</span><br><span class="line">QT_IM_MODULE=fcitx</span><br><span class="line">XMODIFIERS=@im=fcitx</span><br></pre></td></tr></table></figure>

<p>然后注销后再登录</p>
<p>pamac</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S pamac</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>Arch</category>
      </categories>
      <tags>
        <tag>Linux安装</tag>
      </tags>
  </entry>
</search>
